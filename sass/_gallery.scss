.gallery {
	background-color: $color-grey-light-1;
	grid-column: full-start / full-end;

	// we consider the smallest element(img) in our grid to define the size of one cell
	display: grid; // (8cols * 7rows)
	grid-template-columns: repeat(8, 1fr); // equal width columns
	grid-template-rows: repeat(7, 5vw); // 7 rows, each with height of 5% of vw: this is done to maintain an aspect ratio for each cell when scaled down/up
	grid-gap: 1.5rem;
	padding: 1.5rem; 


	&__item {

		&--1 {
			grid-row: 1 / 3;
			grid-column: 1 / 3;
		}
		&--2 {
			grid-row: 1 / 4;
			grid-column: 3 / 6;
		}
		&--3 {
			grid-row: 1 / 3;
			grid-column: 6 / 7;
		}
		&--4 {
			grid-row: 1 / 3;
			grid-column: 7 / 9;
		}
		&--5 {
			grid-row: 3 / 6;
			grid-column: 1 / 3;
		}
		&--6 {
			grid-row: 4 / 6;
			grid-column: 3 / 5;
		}
		&--7 { // smallest image which decides our cell's size
			grid-row: 4 / 5;
			grid-column: 5 / 6;
		}
		&--8 {
			grid-row: 3 / 5;
			grid-column: 6 / 8;
		}
		&--9 {
			grid-row: 3 / 6;
			grid-column: 8 / 9;
		}
		&--10 {
			grid-row: 6 / 8;
			grid-column: 1 / 2;
		}
		&--11 {
			grid-row: 6 / 8;
			grid-column: 2 / 4;
		}
		&--12 {
			grid-row: 6 / 8;
			grid-column: 4 / 5;
		}
		&--13 {
			grid-row: 5 / 8;
			grid-column: 5 / 8;
		}
		&--14 {
			grid-row: 6 / 8;
			grid-column: 8 / 9;
		}


	}

	&__img {
		width: 100%;
		height: 100%; // both height and width are required for object-fit
		display: block; // required for object-fit
		object-fit: cover;
	}
}